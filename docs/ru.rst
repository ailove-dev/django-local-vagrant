Vagrant для локальной разработки
================================

Что же такое Vagrant
--------------------

Если коротко, то **Vagrant** – инструмент для быстрой развертки виртуальных машин. Он упрощает проброс портов, настройки стандартных инструментов и менеджмент машин в целом.

Этот инструмент давно используется для локальной разработки, благодаря своей простоте мы можем получить окружение максимально приближенное к продакшен-серверу, что позволяет сократить ситуации "*у меня на локальной машине работает*".

Структура стандартного проекта
------------------------------

.. parsed-literal::
    .
    ├── ...
    ├── conf        # директория содержания настройки
    ├── data        # директория, в которой хранятся медиа-файлы
    ├── repo
    │   └── dev     # репозитарий, ветка dev
    ├──  tmp        # другие файлы
    └── logs        # логи

Такая структура должна быть у каждого проекта, с которым вы работаете у себя на локальной машине, не зависимо от того, работаете вы  со всем кодом в целом или только с фронтендом.


Как пользоваться Vagrant
------------------------
Установка
~~~~~~~~~

Для начало нужно `установить <http://docs.vagrantup.com/v2/installation/index.html>`_ Vagrant на рабочую машину. Обладателям Mac OS крайне желательно поставить Vagrant через пакет-менеджер, к примеру `brew <http://brew.sh/>`_, пользователи Linux-подобных забирают установщик с сайта, а не из стандартных репозитариев дистрибутива.


Настройка проекта
~~~~~~~~~~~~~~~~~

После установки скачиваем данный репозитарий и помещаем в корень проекта, теперь структура проекта выглядит следующим образом:

.. parsed-literal::
    .
    ├── ...
    ├── conf
    ├── data
    ├── repo
    │   └── dev
    ├──  tmp
    ├──  logs
    ├──  salt       # тут, хронятся настройки окружения
    └── Vagrantfile # файл запуска Vagrant

Важно отметить, что у вас должен быть уже склонирован сам проект.

Теперь нам нужно отредактировать ``Vagrantfile``, исправить в нем две вещи - название проекта и IP адрес. Название проекта должно соответствовать директории в которой находиться проект (обычно соответсрвует названию в фабрике), а IP - любому IP, который доступен на вашей машине. Каждое виртуальное окружение должно работать со своим IP адресом, поэтому если вы запускаете несколько проектов, убедитесь, что вы установили им разные IP.

.. code:: ruby

    config.vm.network :private_network, ip: "192.168.33.101"
    ...

    salt.pillar({
          "django" => {
            "project_name" => "project-name",
            ...
          }

Для работы прописываем в файл hosts, домен для IP:

.. parsed-literal::
    127.0.0.1       localhost
    ...
    192.168.33.101  dev.project-name.ailove.local


Последний шаг: отредактировать файл ``conf/database`` и указать в нем настройки подключения к БД, которые можно узнать в фабрике.


Работа и запуск
~~~~~~~~~~~~~~~

Теперь все готово к запуску, переходим в директорию, где лежит ``Vagrantfile`` и запускаем виртуальную машину:

    $ vagrant up

*Можно пойти выпить кофе, так как процесс установки займет 15-20 минут*

После после установки проект станет доступен по адресу: `http://dev.project-name.ailove.local/ <http://dev.project-name.ailove.local/>`_


Полезные команды
~~~~~~~~~~~~~~~~

Запуск виртуальной машины:

    $ vagrant up

Остановка виртуальной машины:

    $ vagrant halt

Вход в машину по ssh:

    $ vagrant ssh

Уничтожить машину:

    $ vagrant destroy


F.A.Q.
~~~~~~

**Не отображаются картинки?**

Скачайте с сервера папку ``data``.

**После первого старта отдает 502 ошибку?**

Перезапустите машину, такое иногда бывает.

**Я получаю 500 ошибку, что делать?**

В 90% случаев, разработчик доставил пакеты, которых у вас еще нет, выполните команду ``vagrant up --provision``.